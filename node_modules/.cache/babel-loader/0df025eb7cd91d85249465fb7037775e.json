{"ast":null,"code":"var _jsxFileName = \"/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Usuarios/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as usuariosActions from '../../actions/usuariosActions'; //AL CREAR ESTE COMPONENTE NOS MOVEMOS A LA LINEA : 50 : en el Render\n//esta es la clase usuario donde comienza todo. este es un componente clase\n\nclass Usuarios extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.ponerFilas = () => this.props.usuarios.map(usuario => /*#__PURE__*/React.createElement(\"tr\", {\n      key: usuario.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, usuario.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }\n    }, usuario.email), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, usuario.website)));\n  }\n\n  //este es un componente funcional ya que empieza con const, el componente no funcional no manejan estados, solo manejan informacion \n  //en este componente didmount no llamamos los usuarios, en vez de eso estamos llamando el action creator!! y el action creator! esta yendo a la URL y trayendo los usuarios y entregarselos al REDUCER!!\n  componentDidMount() {\n    //en este didmount estamos cambiando el estado estamos cargando el arreglo de dos objetos.\n    //ESTE ES EL ACTION CREATOR QUE VA A TRAER TODO, sabemos que es un action reator porque en la linea 66 lo estoy conectando con mi usuarios action\n    //se manda a llamar todos de usuarios action {EL TRAER TODOS O VAMOS A ENCONTRAR EN EL ARCHIVO USUARIOSACTION.JS de la carpeta actions}\n    this.props.traerTodos();\n\n    ponerContenido = () => {\n      if (this.props.cargando) {\n        return 'Cargando';\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"tabla\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }, \"Nombre\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, \"Correo\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, \"Enlace\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 5\n        }\n      }, this.ponerFilas()));\n    };\n  } // este es un arreglo vacio el cual los usuarios se van a mostrar con los TR que se envioan desde la linea 50 a esta \n  //En Usuarios No hay nada, es un Arreglo VACIO, asi lo define el reducer\n  // el componente aca empieza a llamar el ACTIONCREATOR, esto se realiza desde el DIDMOUNT, linea 8\n\n\n  //todo lo de ponerFilas se cambia todo esto sucede cuando el payload: respuesta.data se actualiza con la nueva info y la trae de nmuevo\n  render() {\n    // console.log(this.props.cargando); //aca en este concole log miramos como esta la distribucion de los objetos y componentes del prop \n    // console.log(this.props.cargando);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, this.ponerContenido());\n  }\n\n}\n\nconst mapStateToProps = reducers => {\n  //le podemos entregar al componente el reducer que se requiera, en este caso solo los usuarios\n  return reducers.usuariosReducer;\n};\n\nexport default connect(mapStateToProps, usuariosActions)(Usuarios); // el primer parametro que el conect debe de recibir, es todos los reducers que el proveedor le va a entrar al usuario, se los entregamos al componente para que los pueda utilizar","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Usuarios/index.js"],"names":["React","Component","connect","usuariosActions","Usuarios","ponerFilas","props","usuarios","map","usuario","id","name","email","website","componentDidMount","traerTodos","ponerContenido","cargando","render","mapStateToProps","reducers","usuariosReducer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,eAAZ,MAAiC,+BAAjC,C,CAEA;AACA;;AACA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAuCjCI,UAvCiC,GAuCpB,MAAM,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,GAApB,CAAyBC,OAAD,iBACzC;AAAI,MAAA,GAAG,EAAGA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACID,OAAO,CAACE,IADZ,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIF,OAAO,CAACG,KADZ,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIH,OAAO,CAACI,OADZ,CAPF,CADiB,CAvCc;AAAA;;AAAE;AACnC;AAEAC,EAAAA,iBAAiB,GAAI;AAAE;AACrB;AACA;AACA,SAAKR,KAAL,CAAWS,UAAX;;AAEDC,IAAAA,cAAc,GAAG,MAAM;AACrB,UAAI,KAAKV,KAAL,CAAWW,QAAf,EAAyB;AACvB,eAAO,UAAP;AACD;;AACD,0BACC;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CADF,CADA,eAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKZ,UAAL,EADJ,CAdA,CADD;AAqBD,KAzBD;AA0BA,GAlCgC,CAoCjC;AACA;AACA;;;AAcA;AAGMa,EAAAA,MAAM,GAAG;AACP;AACA;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKF,cAAL,EADH,CADF;AAKD;;AAhE0B;;AAmEjC,MAAMG,eAAe,GAAIC,QAAD,IAAc;AAAE;AACxC,SAAOA,QAAQ,CAACC,eAAhB;AACC,CAFD;;AAGA,eAAenB,OAAO,CAACiB,eAAD,EAAkBhB,eAAlB,CAAP,CAA0CC,QAA1C,CAAf,C,CACA","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as usuariosActions from '../../actions/usuariosActions'\n\n//AL CREAR ESTE COMPONENTE NOS MOVEMOS A LA LINEA : 50 : en el Render\n//esta es la clase usuario donde comienza todo. este es un componente clase\nclass Usuarios extends Component { //este es un componente funcional ya que empieza con const, el componente no funcional no manejan estados, solo manejan informacion \n//en este componente didmount no llamamos los usuarios, en vez de eso estamos llamando el action creator!! y el action creator! esta yendo a la URL y trayendo los usuarios y entregarselos al REDUCER!!\n\ncomponentDidMount () { //en este didmount estamos cambiando el estado estamos cargando el arreglo de dos objetos.\n  //ESTE ES EL ACTION CREATOR QUE VA A TRAER TODO, sabemos que es un action reator porque en la linea 66 lo estoy conectando con mi usuarios action\n  //se manda a llamar todos de usuarios action {EL TRAER TODOS O VAMOS A ENCONTRAR EN EL ARCHIVO USUARIOSACTION.JS de la carpeta actions}\n  this.props.traerTodos();\n\n ponerContenido = () => { \n   if (this.props.cargando) {\n     return 'Cargando';\n   }\n   return (\n    <table className=\"tabla\">\n    <thead>\n      <tr>\n        <th>\n          Nombre\n        </th>\n        <th>\n          Correo\n        </th>\n        <th>\n          Enlace\n        </th>\n      </tr>\n    </thead>\n    <tbody> \n      { this.ponerFilas() } \n      {/* lo que hace este this.ponerFilas es que por cada usuario entrega una fila o un TR, mirar la linea 14 */}\n    </tbody>\n  </table>\n   )\n } \n}\n\n// este es un arreglo vacio el cual los usuarios se van a mostrar con los TR que se envioan desde la linea 50 a esta \n//En Usuarios No hay nada, es un Arreglo VACIO, asi lo define el reducer\n// el componente aca empieza a llamar el ACTIONCREATOR, esto se realiza desde el DIDMOUNT, linea 8\nponerFilas = () => this.props.usuarios.map((usuario) => (\n  <tr key={ usuario.id }>\n    <td>\n      { usuario.name }\n    </td>\n    <td>\n      { usuario.email }\n    </td>\n    <td>\n      { usuario.website }\n    </td>\n  </tr>\n));\n//todo lo de ponerFilas se cambia todo esto sucede cuando el payload: respuesta.data se actualiza con la nueva info y la trae de nmuevo\n\n\n      render() {\n        // console.log(this.props.cargando); //aca en este concole log miramos como esta la distribucion de los objetos y componentes del prop \n        // console.log(this.props.cargando);\n      \n        return (\n          <div >\n            {this.ponerContenido()} \n          </div>\n        )\n      }\n}\n\nconst mapStateToProps = (reducers) => { //le podemos entregar al componente el reducer que se requiera, en este caso solo los usuarios\nreturn reducers.usuariosReducer;\n}\nexport default connect(mapStateToProps, usuariosActions)(Usuarios);\n// el primer parametro que el conect debe de recibir, es todos los reducers que el proveedor le va a entrar al usuario, se los entregamos al componente para que los pueda utilizar \n\n"]},"metadata":{},"sourceType":"module"}