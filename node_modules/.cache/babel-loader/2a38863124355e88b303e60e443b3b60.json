{"ast":null,"code":"var _jsxFileName = \"/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Publicaciones/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../general/Spinner';\nimport Fatal from '../general/Fatal';\nimport * as usuariosActions from '../../actions/usuariosActions';\nimport * as publicacionesActions from '../../actions/publicacionesActions'; //conectamos la informacion de usuarios reducer importando react-redux, conectamos este componente a redux \n\nconst {\n  traerTodos: usuariosTraerTodos\n} = usuariosActions;\nconst {\n  traerPorUsuario: publicacionesTraerPorUsuario\n} = publicacionesActions;\n\nclass Publicaciones extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.ponerUsuario = () => {\n      const {\n        match: {\n          params: {\n            key\n          }\n        },\n        usuariosReducer\n      } = this.props;\n\n      if (usuariosReducer.error) {\n        return /*#__PURE__*/React.createElement(Fatal, {\n          mensaje: usuariosReducer.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }\n        });\n      }\n\n      if (!usuariosReducer.usuarios.length || usuariosReducer.cargando) {\n        return /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        });\n      }\n\n      const nombre = usuariosReducer.usuarios[key].name;\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 4\n        }\n      }, \"Publicaciones de \", nombre);\n    };\n  }\n\n  async componentDidMount() {\n    //esta parte se tradeuce asi : si no existen los usuarios entonces entonces se traen de usuarios action porque si nos vamos a otra pagina ellos deberian estar ahi \n    //osea que cuando regrese a usuarios no voy a necesitar traerlos porque ya existen en el reducer \n    const {\n      usuariosTraerTodos,\n      publicacionesTraerPorUsuario,\n      match: {\n        params: {\n          key\n        }\n      }\n    } = this.props; //!!se saca todo esto del this.props para no colocarlo en los IF el codigo se reduce\n\n    if (!this.props.usuariosReducer.usuarios.length) {\n      //el estado es el suaurioReducer, este se actualiza poreso no lo sacamos y lo colocamos en la constante de arriba, se ejecuta una vez despues del render\n      await usuariosTraerTodos();\n    }\n\n    if (this.props.usuariosReducer.error) {\n      return;\n    }\n\n    if (!('publicaciones_key' in this.props.usuariosReducer.usuarios[key])) {\n      await publicacionesTraerPorUsuario(key);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 4\n      }\n    }, this.ponerUsuario(), this.props.match.params.key);\n  }\n\n}\n\nconst mapStateToProps = ({\n  usuariosReducer,\n  publicacionesReducer\n}) => {\n  return {\n    usuariosReducer,\n    publicacionesReducer\n  };\n};\n\nconst mapDispatchToProps = {\n  usuariosTraerTodos,\n  publicacionesTraerPorUsuario\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Publicaciones);","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Publicaciones/index.js"],"names":["React","Component","connect","Spinner","Fatal","usuariosActions","publicacionesActions","traerTodos","usuariosTraerTodos","traerPorUsuario","publicacionesTraerPorUsuario","Publicaciones","ponerUsuario","match","params","key","usuariosReducer","props","error","usuarios","length","cargando","nombre","name","componentDidMount","render","mapStateToProps","publicacionesReducer","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,OAAO,KAAKC,eAAZ,MAAiC,+BAAjC;AACA,OAAO,KAAKC,oBAAZ,MAAsC,oCAAtC,C,CACA;;AAEA,MAAM;AAAEC,EAAAA,UAAU,EAAEC;AAAd,IAAqCH,eAA3C;AACA,MAAM;AAAEI,EAAAA,eAAe,EAAEC;AAAnB,IAAoDJ,oBAA1D;;AAEA,MAAMK,aAAN,SAA4BV,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAoBlCW,YApBkC,GAoBnB,MAAM;AACvB,YAAM;AACLC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAEC,YAAAA;AAAF;AAAV,SADF;AAELC,QAAAA;AAFK,UAGF,KAAKC,KAHT;;AAKA,UAAID,eAAe,CAACE,KAApB,EAA2B;AAC1B,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAGF,eAAe,CAACE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AACD,UAAI,CAACF,eAAe,CAACG,QAAhB,CAAyBC,MAA1B,IAAoCJ,eAAe,CAACK,QAAxD,EAAkE;AACjE,4BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AAED,YAAMC,MAAM,GAAGN,eAAe,CAACG,QAAhB,CAAyBJ,GAAzB,EAA8BQ,IAA7C;AAEA,0BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACoBD,MADpB,CADD;AAKA,KAxCoC;AAAA;;AAClC,QAAME,iBAAN,GAA0B;AAAE;AACxB;AACA,UAAM;AACFhB,MAAAA,kBADE;AAEFE,MAAAA,4BAFE;AAGFG,MAAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAACC,UAAAA;AAAD;AAAT;AAHL,QAIF,KAAKE,KAJT,CAFsB,CAML;;AACjB,QAAI,CAAC,KAAKA,KAAL,CAAWD,eAAX,CAA2BG,QAA3B,CAAoCC,MAAzC,EAAiD;AAAE;AAC9C,YAAMZ,kBAAkB,EAAxB;AAEJ;;AACD,QAAI,KAAKS,KAAL,CAAWD,eAAX,CAA2BE,KAA/B,EAAsC;AAC3C;AACA;;AACD,QAAI,EAAE,uBAAuB,KAAKD,KAAL,CAAWD,eAAX,CAA2BG,QAA3B,CAAoCJ,GAApC,CAAzB,CAAJ,EAAwE;AACvE,YAAML,4BAA4B,CAACK,GAAD,CAAlC;AACA;AACE;;AAwBDU,EAAAA,MAAM,GAAG;AACX,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKb,YAAL,EADH,EAEG,KAAKK,KAAL,CAAWJ,KAAX,CAAiBC,MAAjB,CAAwBC,GAF3B,CADD;AAMA;;AAjDoC;;AAoDtC,MAAMW,eAAe,GAAG,CAAC;AAAEV,EAAAA,eAAF;AAAmBW,EAAAA;AAAnB,CAAD,KAA+C;AACtE,SAAO;AAAEX,IAAAA,eAAF;AAAmBW,IAAAA;AAAnB,GAAP;AACA,CAFD;;AAIA,MAAMC,kBAAkB,GAAG;AAC1BpB,EAAAA,kBAD0B;AAE1BE,EAAAA;AAF0B,CAA3B;AAKA,eAAeR,OAAO,CAACwB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../general/Spinner';\nimport Fatal from '../general/Fatal';\n\nimport * as usuariosActions from '../../actions/usuariosActions';\nimport * as publicacionesActions from '../../actions/publicacionesActions';\n//conectamos la informacion de usuarios reducer importando react-redux, conectamos este componente a redux \n\nconst { traerTodos: usuariosTraerTodos } = usuariosActions;\nconst { traerPorUsuario: publicacionesTraerPorUsuario } = publicacionesActions;\n\nclass Publicaciones extends Component {\n    async componentDidMount() { //esta parte se tradeuce asi : si no existen los usuarios entonces entonces se traen de usuarios action porque si nos vamos a otra pagina ellos deberian estar ahi \n        //osea que cuando regrese a usuarios no voy a necesitar traerlos porque ya existen en el reducer \n        const {\n            usuariosTraerTodos,\n            publicacionesTraerPorUsuario,\n            match: {params: {key}}\n        } = this.props;  //!!se saca todo esto del this.props para no colocarlo en los IF el codigo se reduce\n        if (!this.props.usuariosReducer.usuarios.length) { //el estado es el suaurioReducer, este se actualiza poreso no lo sacamos y lo colocamos en la constante de arriba, se ejecuta una vez despues del render\n             await usuariosTraerTodos();\n\n        }\n        if (this.props.usuariosReducer.error) {\n\t\t\treturn;\n\t\t}\n\t\tif (!('publicaciones_key' in this.props.usuariosReducer.usuarios[key])) {\n\t\t\tawait publicacionesTraerPorUsuario(key);\n\t\t}\n    }\n    \n    ponerUsuario = () => {\n\t\tconst {\n\t\t\tmatch: { params: { key } },\n\t\t\tusuariosReducer\n\t\t} = this.props;\n\n\t\tif (usuariosReducer.error) {\n\t\t\treturn <Fatal mensaje={ usuariosReducer.error } />;\n\t\t}\n\t\tif (!usuariosReducer.usuarios.length || usuariosReducer.cargando) {\n\t\t\treturn <Spinner />\n\t\t}\n\n\t\tconst nombre = usuariosReducer.usuarios[key].name;\n\n\t\treturn (\n\t\t\t<h1>\n\t\t\t\tPublicaciones de { nombre }\n\t\t\t</h1>\n\t\t);\n\t};\n\n    render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.ponerUsuario() }\n\t\t\t\t{ this.props.match.params.key }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = ({ usuariosReducer, publicacionesReducer }) => {\n\treturn { usuariosReducer, publicacionesReducer };\n};\n\nconst mapDispatchToProps = {\n\tusuariosTraerTodos,\n\tpublicacionesTraerPorUsuario\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Publicaciones);"]},"metadata":{},"sourceType":"module"}