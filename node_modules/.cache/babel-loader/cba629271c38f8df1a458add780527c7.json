{"ast":null,"code":"import axios from 'axios';\nimport { TRAER_TODAS, CARGANDO, ERROR, CAMBIO_USUARIO, CAMBIO_TITULO, AGREGADA } from '../types/tareasTypes';\nexport const traerTodas = () => async dispatch => {\n  dispatch({\n    type: CARGANDO\n  });\n\n  try {\n    const respuesta = await axios.get('https://jsonplaceholder.typicode.com/todos');\n    const tareas = {};\n    respuesta.data.map(tar => tareas[tar.userId] = { ...tareas[tar.userId],\n      [tar.id]: { ...tar\n      }\n    });\n    dispatch({\n      type: TRAER_TODAS,\n      payload: tareas\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Tareas no disponibles.'\n    });\n  }\n};\nexport const cambioUsuarioId = valor => dispatch => {\n  dispatch({\n    type: CAMBIO_USUARIO,\n    payload: valor\n  });\n};\nexport const cambioTitulo = valor => dispatch => {\n  dispatch({\n    type: CAMBIO_TITULO,\n    payload: valor\n  });\n}; // Creamos el actions agregar() que recibe por parámetro el \n// objeto con la info de la nueva tarea que se enviara a la API, \n// hacemos la petición de tipo POST con axios a la url y mandándole\n// como segundo parámetro el objeto que voy a agregar a la API\n// y me retorna la respuesta de la peticion en respuesta.data \n// el nuevo campo que se agrego.\n\nexport const agregar = nueva_tarea => async dispatch => {\n  dispatch({\n    type: CARGANDO\n  });\n\n  try {\n    await axios.post('https://jsonplaceholder.typicode.com/todos', nueva_tarea);\n    dispatch({\n      type: AGREGADA\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Servicio no disponible en este momento.'\n    });\n  }\n};\nexport const cambioCheck = (usu_id, tar_id) => (dispatch, getState) => {\n  const {\n    tareas\n  } = getState().tareasReducer;\n  const seleccionada = tareas[usu_id][tar_id];\n  const actualizadas = { ...tareas\n  };\n  actualizadas[usu_id] = { ...tareas[usu_id]\n  };\n  actualizadas[usu_id][tar_id] = { ...tareas[usu_id][tar_id],\n    completed: !seleccionada.completed\n  };\n  dispatch({\n    type: ACTUALIZAR,\n    payload: actualizadas\n  });\n}; // Conclusión: cuando se de click al botón guardar llama al action agregar() que ejecuta la petición de \n// tipo post a la API y como segundo parámetro el objeto que voy a agregar a la API, es decir la nueva\n// tarea a algún usuario.","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/actions/tareasAction.js"],"names":["axios","TRAER_TODAS","CARGANDO","ERROR","CAMBIO_USUARIO","CAMBIO_TITULO","AGREGADA","traerTodas","dispatch","type","respuesta","get","tareas","data","map","tar","userId","id","payload","error","console","log","message","cambioUsuarioId","valor","cambioTitulo","agregar","nueva_tarea","post","cambioCheck","usu_id","tar_id","getState","tareasReducer","seleccionada","actualizadas","completed","ACTUALIZAR"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n\tTRAER_TODAS,\n\tCARGANDO,\n\tERROR,\n\tCAMBIO_USUARIO,\n\tCAMBIO_TITULO,\n\tAGREGADA\n} from '../types/tareasTypes';\n\nexport const traerTodas = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: CARGANDO\n\t});\n\n\ttry {\n\t\tconst respuesta = await axios.get('https://jsonplaceholder.typicode.com/todos');\n\t\t\n\t\tconst tareas = {};\n\t\trespuesta.data.map((tar) => (\n\t\t\ttareas[tar.userId] = {\n\t\t\t\t...tareas[tar.userId],\n\t\t\t\t[tar.id]: {\n\t\t\t\t\t...tar\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\tdispatch({\n\t\t\ttype: TRAER_TODAS,\n\t\t\tpayload: tareas\n\t\t})\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: ERROR,\n\t\t\tpayload: 'Tareas no disponibles.'\n\t\t})\n\t}\n};\n\nexport const cambioUsuarioId = (valor) => (dispatch) => {\n\tdispatch({\n\t\ttype: CAMBIO_USUARIO,\n\t\tpayload: valor\n\t})\n};\n\nexport const cambioTitulo = (valor) => (dispatch) => {\n\tdispatch({\n\t\ttype: CAMBIO_TITULO,\n\t\tpayload: valor\n\t})\n};\n\n// Creamos el actions agregar() que recibe por parámetro el \n// objeto con la info de la nueva tarea que se enviara a la API, \n// hacemos la petición de tipo POST con axios a la url y mandándole\n// como segundo parámetro el objeto que voy a agregar a la API\n// y me retorna la respuesta de la peticion en respuesta.data \n// el nuevo campo que se agrego.\n\nexport const agregar = (nueva_tarea) => async (dispatch) => {\n\tdispatch({\n\t\ttype: CARGANDO\n\t});\n\n\ttry {\n\t\tawait axios.post('https://jsonplaceholder.typicode.com/todos', nueva_tarea);\n\t\tdispatch({\n\t\t\ttype: AGREGADA\n\t\t});\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: ERROR,\n\t\t\tpayload: 'Servicio no disponible en este momento.'\n\t\t});\n\t}\n};\nexport const cambioCheck = (usu_id, tar_id) => (dispatch, getState) => {\n\tconst { tareas } = getState().tareasReducer;\n\tconst seleccionada = tareas[usu_id][tar_id];\n\n\tconst actualizadas = {\n\t\t...tareas\n\t};\n\tactualizadas[usu_id] = {\n\t\t...tareas[usu_id]\n\t};\n\tactualizadas[usu_id][tar_id] = {\n\t\t...tareas[usu_id][tar_id],\n\t\tcompleted: !seleccionada.completed\n\t}\n\n\tdispatch({\n\t\ttype: ACTUALIZAR,\n\t\tpayload: actualizadas\n\t})\n};\n// Conclusión: cuando se de click al botón guardar llama al action agregar() que ejecuta la petición de \n// tipo post a la API y como segundo parámetro el objeto que voy a agregar a la API, es decir la nueva\n// tarea a algún usuario.\n\t"]},"metadata":{},"sourceType":"module"}