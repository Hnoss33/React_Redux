{"ast":null,"code":"import axios from 'axios';\nimport { CARGANDO, ERROR, TRAER_POR_USUARIO } from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\nconst {\n  TRAER_TODOS: USUARIOS_TRAER_TODOS\n} = usuariosTypes;\nexport const traerPorUsuario = key => async (dispatch, getState) => {\n  dispatch({\n    type: CARGANDO\n  });\n  let {\n    usuarios\n  } = getState().usuariosReducer;\n  const {\n    publicaciones\n  } = getState().publicacionesReducer;\n  const usuario_id = usuarios[key].id;\n\n  try {\n    const respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n    const publicaciones_actualizadas = [...publicaciones, respuesta.data];\n    dispatch({\n      type: TRAER_POR_USUARIO,\n      payload: publicaciones_actualizadas\n    });\n    const publicaciones_key = publicaciones_actualizadas.length - 1;\n    const usuarios_actualizados = [...usuarios];\n    usuarios_actualizados[key] = { ...usuarios[key],\n      publicaciones_key\n    };\n    dispatch({\n      type: USUARIOS_TRAER_TODOS,\n      payload: usuarios_actualizados\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Publicaciones no disponibles.'\n    });\n  }\n}; //Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/actions/publicacionesActions.js"],"names":["axios","CARGANDO","ERROR","TRAER_POR_USUARIO","usuariosTypes","TRAER_TODOS","USUARIOS_TRAER_TODOS","traerPorUsuario","key","dispatch","getState","type","usuarios","usuariosReducer","publicaciones","publicacionesReducer","usuario_id","id","respuesta","get","publicaciones_actualizadas","data","payload","publicaciones_key","length","usuarios_actualizados","error","console","log","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAkBC,KAAlB,EAAwBC,iBAAxB,QAAiD,6BAAjD;AACA,OAAO,KAAKC,aAAZ,MAA+B,wBAA/B;AAEA,MAAM;AAAEC,EAAAA,WAAW,EAAEC;AAAf,IAAwCF,aAA9C;AAEA,OAAO,MAAMG,eAAe,GAAIC,GAAD,IAAS,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACrED,EAAAA,QAAQ,CAAC;AACRE,IAAAA,IAAI,EAAEV;AADE,GAAD,CAAR;AAIA,MAAI;AAAEW,IAAAA;AAAF,MAAeF,QAAQ,GAAGG,eAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBJ,QAAQ,GAAGK,oBAArC;AACA,QAAMC,UAAU,GAAGJ,QAAQ,CAACJ,GAAD,CAAR,CAAcS,EAAjC;;AAEA,MAAI;AACH,UAAMC,SAAS,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAW,qDAAoDH,UAAW,EAA1E,CAAxB;AACA,UAAMI,0BAA0B,GAAG,CAClC,GAAGN,aAD+B,EAElCI,SAAS,CAACG,IAFwB,CAAnC;AAKAZ,IAAAA,QAAQ,CAAC;AACRE,MAAAA,IAAI,EAAER,iBADE;AAERmB,MAAAA,OAAO,EAAEF;AAFD,KAAD,CAAR;AAKA,UAAMG,iBAAiB,GAAGH,0BAA0B,CAACI,MAA3B,GAAoC,CAA9D;AACA,UAAMC,qBAAqB,GAAG,CAAC,GAAGb,QAAJ,CAA9B;AACAa,IAAAA,qBAAqB,CAACjB,GAAD,CAArB,GAA6B,EAC5B,GAAGI,QAAQ,CAACJ,GAAD,CADiB;AAE5Be,MAAAA;AAF4B,KAA7B;AAKAd,IAAAA,QAAQ,CAAC;AACRE,MAAAA,IAAI,EAAEL,oBADE;AAERgB,MAAAA,OAAO,EAAEG;AAFD,KAAD,CAAR;AAIA,GAvBD,CAwBA,OAAOC,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACApB,IAAAA,QAAQ,CAAC;AACRE,MAAAA,IAAI,EAAET,KADE;AAERoB,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAR;AAIA;AACD,CAxCM,C,CA0CP;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport { CARGANDO,ERROR,TRAER_POR_USUARIO } from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\n\nconst { TRAER_TODOS: USUARIOS_TRAER_TODOS } = usuariosTypes;\n\nexport const traerPorUsuario = (key) => async (dispatch, getState) => {\n\tdispatch({\n\t\ttype: CARGANDO\n\t});\n\n\tlet { usuarios } = getState().usuariosReducer;\n\tconst { publicaciones } = getState().publicacionesReducer;\n\tconst usuario_id = usuarios[key].id;\n\n\ttry {\n\t\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n\t\tconst publicaciones_actualizadas = [\n\t\t\t...publicaciones,\n\t\t\trespuesta.data\n\t\t];\n\n\t\tdispatch({\n\t\t\ttype: TRAER_POR_USUARIO,\n\t\t\tpayload: publicaciones_actualizadas\n\t\t});\n\n\t\tconst publicaciones_key = publicaciones_actualizadas.length - 1;\n\t\tconst usuarios_actualizados = [...usuarios];\n\t\tusuarios_actualizados[key] = {\n\t\t\t...usuarios[key],\n\t\t\tpublicaciones_key\n\t\t};\n\n\t\tdispatch({\n\t\t\ttype: USUARIOS_TRAER_TODOS,\n\t\t\tpayload: usuarios_actualizados\n\t\t});\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: ERROR,\n\t\t\tpayload: 'Publicaciones no disponibles.'\n\t\t});\n\t}\n};\n\n//Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico"]},"metadata":{},"sourceType":"module"}