{"ast":null,"code":"import axios from 'axios';\nimport { CARGANDO, ERROR, ACTUALIZAR, COM_CARGANDO, COM_ERROR, COM_ACTUALIZAR } from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\nconst {\n  TRAER_TODOS: USUARIOS_TRAER_TODOS\n} = usuariosTypes; //Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico\n\nexport const traerPorUsuario = key => async (dispatch, getState) => {\n  dispatch({\n    type: CARGANDO\n  });\n  let {\n    usuarios\n  } = getState().usuariosReducer;\n  const {\n    publicaciones\n  } = getState().publicacionesReducer;\n  const usuario_id = usuarios[key].id;\n\n  try {\n    const respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n    const nuevas = respuesta.data.map(publicacion => ({ ...publicacion,\n      comentarios: [],\n      abierto: false\n    }));\n    const publicaciones_actualizadas = [...publicaciones, nuevas];\n    dispatch({\n      type: ACTUALIZAR,\n      payload: publicaciones_actualizadas\n    });\n    const publicaciones_key = publicaciones_actualizadas.length - 1;\n    const usuarios_actualizados = [...usuarios];\n    usuarios_actualizados[key] = { ...usuarios[key],\n      publicaciones_key\n    };\n    dispatch({\n      type: USUARIOS_TRAER_TODOS,\n      payload: usuarios_actualizados\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Publicaciones no disponibles.'\n    });\n  }\n}; // En el componente hacemos un condicional que dice si el atributo abierto de la publicación es \n// cierto retorna abierto caso contrario es cerrado.\n// En el abrirCerrarActions, selecciono a la publicación que le di click y la guardo en const, \n// y hago otra const que va a tener esa publicación que le di click y modifica la propiedad de \n// abierto por el contrario que tiene !seleccionada.abierto.\n// Guardamos en constante a todas las publicaciones de todos los usuarios, seleccionamos de todas\n// las publicaciones la que le corresponden al usuario y desplegamos desplegamos todas las publicaciones\n// de este usuario y por ultimo de todas las publicaciones del usuario, selecciono a la que se le dio click\n// y sera igual a la publicacion pero con el abierto cambiado.\n// Hago un **dispatch **mandando el arreglo con todas las publicaciones de los usuarios al PublicacionesReducer, \n// pero a la publicación que se le dio click será igual a la publicación pero con el atributo abierto cambiado.\n// Conclusion: al PublicacionesReducer le mando un arreglo con todas las publicaciones de los usuarios,\n// pero a la publicación que se le dio click será igual a la publicación pero con el atributo abierto cambiado.\n\nexport const abrirCerrar = (pub_key, com_key) => (dispatch, getState) => {\n  const {\n    publicaciones\n  } = getState().publicacionesReducer;\n  const seleccionada = publicaciones[pub_key][com_key];\n  const actualizada = { ...seleccionada,\n    abierto: !seleccionada.abierto\n  };\n  const publicaciones_actualizadas = [...publicaciones];\n  publicaciones_actualizadas[pub_key] = [...publicaciones[pub_key]];\n  publicaciones_actualizadas[pub_key][com_key] = actualizada;\n  dispatch({\n    type: ACTUALIZAR,\n    payload: publicaciones_actualizadas\n  });\n}; // Terminamos el actions traerComentarios() que va a buscar los comentarios de la publicacion que se le dio click. \n// Y este retorna todas las publicaciones pero modifica el atributo comentarios de la publicación que se le dio CLICK\n// En el componente validamos si todavía no están los comentarios en el estado llamamos al actions creators para traer\n//  los comentarios de esta publicación y si ya están no los busques\n// Conclusión: Terminamos el actions traerComentarios() que va a buscar los comentarios de la publicación que se le dio click. \n// Y este retorna todas las publicaciones pero modifica el atributo comentarios de la publicación que se le dio CLICK\n\nexport const traerComentarios = (pub_key, com_key) => async (dispatch, getState) => {\n  dispatch({\n    type: COM_CARGANDO\n  });\n  const {\n    publicaciones\n  } = getState().publicacionesReducer;\n  const seleccionada = publicaciones[pub_key][com_key];\n\n  try {\n    const respuesta = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${seleccionada.id}`);\n    const actualizada = { ...seleccionada,\n      comentarios: respuesta.data\n    };\n    const publicaciones_actualizadas = [...publicaciones];\n    publicaciones_actualizadas[pub_key] = [...publicaciones[pub_key]];\n    publicaciones_actualizadas[pub_key][com_key] = actualizada;\n    dispatch({\n      type: COM_ACTUALIZAR,\n      payload: publicaciones_actualizadas\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: COM_ERROR,\n      payload: 'Comentarios no disponibles.'\n    });\n  }\n}; // Creo una variable que será un arreglo de objetos con todo lo que me trae respuesta.data \n// y le agrego a cada publicación dos atributos mas. Y las mando al arreglo de publicaciones_actualizadas \n// (ese arreglo tiene las publicaciones) Publicaciones/index.js creo un función llamada mostrarInfo() \n// que es lo que va a retornar ponerPublicaciones() Es una función que retorna todas las publicaciones \n// del usuario en especifico (recibimos por parámetro todas las publicaciones que le corresponden a este \n// usuario y la casilla de donde están las publicaciones de este usuario)\n// Creamos un **actionsCreator **en PublicacionesActions que cuando le den click al div llame al actions, \n// que recibe por parámetro la casilla de donde están las publicaciones de este usuario y a cual publicación \n// en especifico fue a la que le di click (sacamos el índice de la publicación del map)\n// Conclusión: a cada publicación le agrego dos atributos, después creo una función en Publicaciones/index.js \n// llamada mostrarInfo() y Creamos un actionsCreator en PublicacionesActions que cuando le den click al div llame \n// al actions y este recibe por parámetro la casilla de donde están las publicaciones de este usuario y a cual publicación \n// en especifico fue a la que le di click","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/actions/publicacionesActions.js"],"names":["axios","CARGANDO","ERROR","ACTUALIZAR","COM_CARGANDO","COM_ERROR","COM_ACTUALIZAR","usuariosTypes","TRAER_TODOS","USUARIOS_TRAER_TODOS","traerPorUsuario","key","dispatch","getState","type","usuarios","usuariosReducer","publicaciones","publicacionesReducer","usuario_id","id","respuesta","get","nuevas","data","map","publicacion","comentarios","abierto","publicaciones_actualizadas","payload","publicaciones_key","length","usuarios_actualizados","error","console","log","message","abrirCerrar","pub_key","com_key","seleccionada","actualizada","traerComentarios"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n\tCARGANDO,\n\tERROR,\n\tACTUALIZAR,\n\tCOM_CARGANDO,\n\tCOM_ERROR,\n\tCOM_ACTUALIZAR\n} from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\n\nconst { TRAER_TODOS: USUARIOS_TRAER_TODOS } = usuariosTypes;\n//Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico\n\nexport const traerPorUsuario = (key) => async (dispatch, getState) => {\n\tdispatch({\n\t\ttype: CARGANDO\n\t});\n\n\tlet { usuarios } = getState().usuariosReducer;\n\tconst { publicaciones } = getState().publicacionesReducer;\n\tconst usuario_id = usuarios[key].id;\n\n\ttry {\n\t\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n\t\tconst nuevas = respuesta.data.map((publicacion) => ({\n\t\t\t...publicacion,\n\t\t\tcomentarios: [],\n\t\t\tabierto: false\n\t\t}));\n\t\tconst publicaciones_actualizadas = [\n\t\t\t...publicaciones,\n\t\t\tnuevas\n\t\t];\n\n\t\tdispatch({\n\t\t\ttype: ACTUALIZAR,\n\t\t\tpayload: publicaciones_actualizadas\n\t\t});\n\n\t\tconst publicaciones_key = publicaciones_actualizadas.length - 1;\n\t\tconst usuarios_actualizados = [...usuarios];\n\t\tusuarios_actualizados[key] = {\n\t\t\t...usuarios[key],\n\t\t\tpublicaciones_key\n\t\t};\n\n\t\tdispatch({\n\t\t\ttype: USUARIOS_TRAER_TODOS,\n\t\t\tpayload: usuarios_actualizados\n\t\t});\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: ERROR,\n\t\t\tpayload: 'Publicaciones no disponibles.'\n\t\t});\n\t}\n};\n\n\n// En el componente hacemos un condicional que dice si el atributo abierto de la publicación es \n// cierto retorna abierto caso contrario es cerrado.\n// En el abrirCerrarActions, selecciono a la publicación que le di click y la guardo en const, \n// y hago otra const que va a tener esa publicación que le di click y modifica la propiedad de \n// abierto por el contrario que tiene !seleccionada.abierto.\n// Guardamos en constante a todas las publicaciones de todos los usuarios, seleccionamos de todas\n// las publicaciones la que le corresponden al usuario y desplegamos desplegamos todas las publicaciones\n// de este usuario y por ultimo de todas las publicaciones del usuario, selecciono a la que se le dio click\n// y sera igual a la publicacion pero con el abierto cambiado.\n// Hago un **dispatch **mandando el arreglo con todas las publicaciones de los usuarios al PublicacionesReducer, \n// pero a la publicación que se le dio click será igual a la publicación pero con el atributo abierto cambiado.\n// Conclusion: al PublicacionesReducer le mando un arreglo con todas las publicaciones de los usuarios,\n// pero a la publicación que se le dio click será igual a la publicación pero con el atributo abierto cambiado.\n\nexport const abrirCerrar = (pub_key, com_key) => (dispatch, getState) => {\n\tconst { publicaciones } = getState().publicacionesReducer;\n\tconst seleccionada = publicaciones[pub_key][com_key];\n\n\tconst actualizada = {\n\t\t...seleccionada,\n\t\tabierto: !seleccionada.abierto\n\t};\n\n\tconst publicaciones_actualizadas = [...publicaciones];\n\n\tpublicaciones_actualizadas[pub_key] = [\n\t\t...publicaciones[pub_key]\n\t];\n\tpublicaciones_actualizadas[pub_key][com_key] = actualizada;\n\t\n\tdispatch({\n\t\ttype: ACTUALIZAR,\n\t\tpayload: publicaciones_actualizadas\n\t});\n};\n\n// Terminamos el actions traerComentarios() que va a buscar los comentarios de la publicacion que se le dio click. \n// Y este retorna todas las publicaciones pero modifica el atributo comentarios de la publicación que se le dio CLICK\n// En el componente validamos si todavía no están los comentarios en el estado llamamos al actions creators para traer\n//  los comentarios de esta publicación y si ya están no los busques\n// Conclusión: Terminamos el actions traerComentarios() que va a buscar los comentarios de la publicación que se le dio click. \n// Y este retorna todas las publicaciones pero modifica el atributo comentarios de la publicación que se le dio CLICK\nexport const traerComentarios = (pub_key, com_key) => async (dispatch, getState) => {\n\tdispatch({\n\t\ttype: COM_CARGANDO\n\t});\n\n\tconst { publicaciones } = getState().publicacionesReducer;\n\tconst seleccionada = publicaciones[pub_key][com_key];\n\n\ttry {\n\t\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${seleccionada.id}`)\n\n\t\tconst actualizada = {\n\t\t\t...seleccionada,\n\t\t\tcomentarios: respuesta.data\n\t\t};\n\n\t\tconst publicaciones_actualizadas = [...publicaciones];\n\n\t\tpublicaciones_actualizadas[pub_key] = [\n\t\t\t...publicaciones[pub_key]\n\t\t];\n\t\tpublicaciones_actualizadas[pub_key][com_key] = actualizada;\n\t\t\n\t\tdispatch({\n\t\t\ttype: COM_ACTUALIZAR,\n\t\t\tpayload: publicaciones_actualizadas\n\t\t});\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: COM_ERROR,\n\t\t\tpayload: 'Comentarios no disponibles.'\n\t\t});\n\t}\n};\n\n// Creo una variable que será un arreglo de objetos con todo lo que me trae respuesta.data \n// y le agrego a cada publicación dos atributos mas. Y las mando al arreglo de publicaciones_actualizadas \n// (ese arreglo tiene las publicaciones) Publicaciones/index.js creo un función llamada mostrarInfo() \n// que es lo que va a retornar ponerPublicaciones() Es una función que retorna todas las publicaciones \n// del usuario en especifico (recibimos por parámetro todas las publicaciones que le corresponden a este \n// usuario y la casilla de donde están las publicaciones de este usuario)\n// Creamos un **actionsCreator **en PublicacionesActions que cuando le den click al div llame al actions, \n// que recibe por parámetro la casilla de donde están las publicaciones de este usuario y a cual publicación \n// en especifico fue a la que le di click (sacamos el índice de la publicación del map)\n// Conclusión: a cada publicación le agrego dos atributos, después creo una función en Publicaciones/index.js \n// llamada mostrarInfo() y Creamos un actionsCreator en PublicacionesActions que cuando le den click al div llame \n// al actions y este recibe por parámetro la casilla de donde están las publicaciones de este usuario y a cual publicación \n// en especifico fue a la que le di click\n\n"]},"metadata":{},"sourceType":"module"}