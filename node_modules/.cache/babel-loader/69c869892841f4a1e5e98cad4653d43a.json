{"ast":null,"code":"import axios from 'axios';\nimport { TRAER_POR_USUARIO, CARGANDO, ERROR } from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\nconst {\n  TRAER_TODOS: USUARIOS_TRAER_TODOS\n} = usuariosTypes;\nexport const traerPorUsuario = key => async (dispatch, getState) => {\n  const {\n    usuarios\n  } = getState().usuariosReducer;\n  const {\n    publicaciones\n  } = getState().publicacionesReducer;\n  const usuario_id = usuarios[key].id;\n  const respuesta = await axios.get(`https://jsonplaceholder.typissscode.com/posts?userId=${usuario_id}`);\n  const publicaciones_actualizadas = [...publicaciones, respuesta.data];\n  const publicaciones_key = publicaciones_actualizadas.length - 1; //la casilla es 0 lo disminuimos en 1 \n\n  const usuarios_actualizados = [...usuarios];\n  usuarios_actualizados[key] = { ...usuarios[key],\n    publicaciones_key //inmutabilidad => como es la misma palabra se evita esto: publicaciones_key:publicaciones_key\n\n  };\n  dispatch({\n    type: USUARIOS_TRAER_TODOS,\n    payload: usuarios_actualizados\n  });\n  dispatch({\n    type: TRAER_POR_USUARIO,\n    payload: publicaciones_actualizadas\n  });\n}; //Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/actions/publicacionesActions.js"],"names":["axios","TRAER_POR_USUARIO","CARGANDO","ERROR","usuariosTypes","TRAER_TODOS","USUARIOS_TRAER_TODOS","traerPorUsuario","key","dispatch","getState","usuarios","usuariosReducer","publicaciones","publicacionesReducer","usuario_id","id","respuesta","get","publicaciones_actualizadas","data","publicaciones_key","length","usuarios_actualizados","type","payload"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,QAA5B,EAAsCC,KAAtC,QAAmD,6BAAnD;AACA,OAAO,KAAKC,aAAZ,MAA+B,wBAA/B;AAEA,MAAM;AAAEC,EAAAA,WAAW,EAAEC;AAAf,IAAwCF,aAA9C;AAEA,OAAO,MAAMG,eAAe,GAAIC,GAAD,IAAS,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAeD,QAAQ,GAAGE,eAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBH,QAAQ,GAAGI,oBAArC;AACA,QAAMC,UAAU,GAAGJ,QAAQ,CAACH,GAAD,CAAR,CAAcQ,EAAjC;AACA,QAAMC,SAAS,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW,wDAAuDH,UAAW,EAA7E,CAAxB;AAEH,QAAMI,0BAA0B,GAAG,CAC5B,GAAGN,aADyB,EAE5BI,SAAS,CAACG,IAFkB,CAAnC;AAIG,QAAMC,iBAAiB,GAAGF,0BAA0B,CAACG,MAA3B,GAAoC,CAA9D,CAVkE,CAUD;;AACjE,QAAMC,qBAAqB,GAAG,CAAC,GAAGZ,QAAJ,CAA9B;AACAY,EAAAA,qBAAqB,CAACf,GAAD,CAArB,GAA6B,EACzB,GAAGG,QAAQ,CAACH,GAAD,CADc;AAEzBa,IAAAA,iBAFyB,CAEP;;AAFO,GAA7B;AAIAZ,EAAAA,QAAQ,CAAC;AACXe,IAAAA,IAAI,EAAElB,oBADK;AAEXmB,IAAAA,OAAO,EAAEF;AAFE,GAAD,CAAR;AAIAd,EAAAA,QAAQ,CAAC;AACXe,IAAAA,IAAI,EAAEvB,iBADK;AAEXwB,IAAAA,OAAO,EAAEN;AAFE,GAAD,CAAR;AAIH,CAxBM,C,CA0BP;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport { TRAER_POR_USUARIO, CARGANDO, ERROR } from '../types/publicacionesTypes';\nimport * as usuariosTypes from '../types/usuariosTypes';\n\nconst { TRAER_TODOS: USUARIOS_TRAER_TODOS } = usuariosTypes;\n\nexport const traerPorUsuario = (key) => async (dispatch, getState) => {\n    const { usuarios } = getState().usuariosReducer;\n    const { publicaciones } = getState().publicacionesReducer;\n    const usuario_id = usuarios[key].id;\n    const respuesta = await axios.get(`https://jsonplaceholder.typissscode.com/posts?userId=${usuario_id}`);\n\n\tconst publicaciones_actualizadas = [\n        ...publicaciones,\n        respuesta.data\n    ]\n    const publicaciones_key = publicaciones_actualizadas.length - 1; //la casilla es 0 lo disminuimos en 1 \n    const usuarios_actualizados = [...usuarios];\n    usuarios_actualizados[key] = {\n        ...usuarios[key],\n        publicaciones_key //inmutabilidad => como es la misma palabra se evita esto: publicaciones_key:publicaciones_key\n    }\n    dispatch({\n\t\ttype: USUARIOS_TRAER_TODOS,\n\t\tpayload: usuarios_actualizados\n\t});\n    dispatch({\n\t\ttype: TRAER_POR_USUARIO,\n\t\tpayload: publicaciones_actualizadas\n\t});\n};\n\n//Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico"]},"metadata":{},"sourceType":"module"}