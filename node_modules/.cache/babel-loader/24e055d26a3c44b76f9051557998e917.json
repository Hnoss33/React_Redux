{"ast":null,"code":"import axios from 'axios';\nimport { TRAER_TODOS, CARGANDO, ERROR } from '../types/publicacionesTypes';\nexport const traerTodos = () => async dispatch => {\n  dispatch({\n    type: CARGANDO\n  });\n\n  try {\n    const respuesta = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    dispatch({\n      type: TRAER_TODOS,\n      payload: respuesta.data\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: ERROR,\n      payload: 'Algo salió mal, intente más tarde.'\n    });\n  }\n};\nexport const traerPorUsuario = key => async (dispatch, getState) => {\n  const {\n    usuarios\n  } = getState().usuariosReducer;\n  const usuario_id = usuarios[key].id;\n  const respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n  dispatch({\n    type: TRAER_TODOS,\n    payload: respuesta.data\n  });\n}; //Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/actions/publicacionesActions.js"],"names":["axios","TRAER_TODOS","CARGANDO","ERROR","traerTodos","dispatch","type","respuesta","get","payload","data","error","console","log","message","traerPorUsuario","key","getState","usuarios","usuariosReducer","usuario_id","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,KAAhC,QAA6C,6BAA7C;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEJ;AADE,GAAD,CAAR;;AAIA,MAAI;AACH,UAAMK,SAAS,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,4CAAV,CAAxB;AACAH,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEL,WADE;AAERQ,MAAAA,OAAO,EAAEF,SAAS,CAACG;AAFX,KAAD,CAAR;AAIA,GAND,CAOA,OAAOC,KAAP,EAAc;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAT,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEH,KADE;AAERM,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAR;AAIA;AACD,CAnBM;AAoBP,OAAO,MAAMM,eAAe,GAAIC,GAAD,IAAS,OAAOX,QAAP,EAAiBY,QAAjB,KAA8B;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAeD,QAAQ,GAAGE,eAAhC;AACA,QAAMC,UAAU,GAAGF,QAAQ,CAACF,GAAD,CAAR,CAAcK,EAAjC;AAEA,QAAMd,SAAS,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAW,qDAAoDY,UAAW,EAA1E,CAAxB;AACAf,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEL,WADE;AAERQ,IAAAA,OAAO,EAAEF,SAAS,CAACG;AAFX,GAAD,CAAR;AAIA,CATM,C,CAWP;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\nimport { TRAER_TODOS, CARGANDO, ERROR } from '../types/publicacionesTypes';\n\nexport const traerTodos = () => async (dispatch) => {\n\tdispatch({\n\t\ttype: CARGANDO\n\t});\n\n\ttry {\n\t\tconst respuesta = await axios.get('https://jsonplaceholder.typicode.com/posts');\n\t\tdispatch({\n\t\t\ttype: TRAER_TODOS,\n\t\t\tpayload: respuesta.data\n\t\t})\n\t}\n\tcatch (error) {\n\t\tconsole.log(error.message);\n\t\tdispatch({\n\t\t\ttype: ERROR,\n\t\t\tpayload: 'Algo salió mal, intente más tarde.'\n\t\t})\n\t}\n};\nexport const traerPorUsuario = (key) => async (dispatch, getState) => {\n\tconst { usuarios } = getState().usuariosReducer;\n\tconst usuario_id = usuarios[key].id;\n\t\n\tconst respuesta = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${usuario_id}`);\n\tdispatch({\n\t\ttype: TRAER_TODOS,\n\t\tpayload: respuesta.data\n\t});\n};\n\n//Creamos un nuevo action creator traerPorUsuario() que recibe por parámetro la key (es el índice del ítem del arreglo)\n//Hacemos que primero llame el actions creator de usuariosTraerTodos() con un await y luego que llame el action de traerPorUsuario(MANDAMOS_KEY) y le mandamos por parámetro la key (es el índice del ítem del arreglo)\n//Este actions creator traerPorUsuario() accede a todos los usuarios con getState(), y del usuario que llego saca el id, realiza la petición trae todas las publicaciones de este usuario y hace el dispatch de tipo TRAER_TODOS\n//Y ya tenemos las publicaciones de ese usuario en especifico"]},"metadata":{},"sourceType":"module"}