{"ast":null,"code":"var _jsxFileName = \"/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Publicaciones/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as usuariosActions from '../../actions/usuariosActions'; //conectamos la informacion de usuarios reducer importando react-redux, conectamos este componente a redux \n\nclass Publicaciones extends Component {\n  componentDidMount() {\n    //esta parte se tradeuce asi : si no existen los usuarios entonces entonces se traen de usuarios action porque si nos vamos a otra pagina ellos deberian estar ahi \n    //osea que cuando regrese a usuarios no voy a necesitar traerlos porque ya existen en el reducer \n    if (!this.props.usuarios.length) {\n      this.props.traerTodos();\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, \"Publicaciones de\"), this.props.match.params.key);\n  }\n\n}\n\nconst mapStateToProps = reducers => {\n  return reducers.usuariosReducer;\n};\n\nexport default connect(mapStateToProps, usuariosActions)(Publicaciones);","map":{"version":3,"sources":["/Users/hydra/Documents/GitHub/blogReact/blog_react/src/components/Publicaciones/index.js"],"names":["React","Component","connect","usuariosActions","Publicaciones","componentDidMount","props","usuarios","length","traerTodos","render","console","log","match","params","key","mapStateToProps","reducers","usuariosReducer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,KAAKC,eAAZ,MAAiC,+BAAjC,C,CACA;;AACA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAClCI,EAAAA,iBAAiB,GAAE;AAAE;AACjB;AACA,QAAI,CAAC,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAAzB,EAAiC;AACzC,WAAKF,KAAL,CAAWG,UAAX;AAES;AACJ;;AACDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,EAIC,KAAKA,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBC,GAJzB,CADJ;AAQH;;AAnBiC;;AAsBtC,MAAMC,eAAe,GAAIC,QAAD,IAAc;AAClC,SAAOA,QAAQ,CAACC,eAAhB;AAEH,CAHD;;AAIA,eAAehB,OAAO,CAACc,eAAD,EAAkBb,eAAlB,CAAP,CAA0CC,aAA1C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport * as usuariosActions from '../../actions/usuariosActions';\n//conectamos la informacion de usuarios reducer importando react-redux, conectamos este componente a redux \nclass Publicaciones extends Component {\n    componentDidMount(){ //esta parte se tradeuce asi : si no existen los usuarios entonces entonces se traen de usuarios action porque si nos vamos a otra pagina ellos deberian estar ahi \n        //osea que cuando regrese a usuarios no voy a necesitar traerlos porque ya existen en el reducer \n        if (!this.props.usuarios.length) {\nthis.props.traerTodos();\n\n        }\n    }\n    render() {\n        console.log(this.props);\n        \n        return (\n            <div>\n            <h1>\n            Publicaciones de\n            </h1>\n            {this.props.match.params.key}  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (reducers) => {\n    return reducers.usuariosReducer;\n\n}\nexport default connect(mapStateToProps, usuariosActions)(Publicaciones);\n"]},"metadata":{},"sourceType":"module"}